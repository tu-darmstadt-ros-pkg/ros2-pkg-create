cmake_minimum_required(VERSION 3.8)
project({{ package_name }})

# Default to C++17
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

find_package(ament_cmake REQUIRED)
{% if has_reconfigurable_params or is_lifecycle %}
find_package(hector_ros2_utils REQUIRED)
{% endif %}
find_package(rclcpp REQUIRED)
{% if has_action_server %}
find_package(rclcpp_action REQUIRED)
find_package({{ package_name }}_msgs REQUIRED)
{% endif %}
{% if is_component %}
find_package(rclcpp_components REQUIRED)
{% endif %}
{% if is_lifecycle %}
find_package(rclcpp_lifecycle REQUIRED)
{% endif %}
find_package(std_msgs REQUIRED)
{% if has_service_server %}
find_package(std_srvs REQUIRED)
{% endif %}

{% if is_component %}
{% set target_name = node_name + '_component' %}
{% else %}
{% set target_name = node_name %}
{% endif %}

{% if is_component %}
add_library({{ target_name }} SHARED src/{{ node_name }}.cpp)

rclcpp_components_register_node({{ target_name }}
  PLUGIN "{{ package_name }}::{{ node_class_name }}"
  EXECUTABLE {{ node_name }}
)
{% else %}
add_executable({{ target_name }} src/{{ node_name }}.cpp)
{% endif %}

target_include_directories({{ target_name }} PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>
)

ament_target_dependencies({{ target_name }}
{% if has_reconfigurable_params or is_lifecycle %}
  hector_ros2_utils
{% endif %}
  rclcpp
{% if has_action_server %}
  rclcpp_action
  {{ package_name }}_msgs
{% endif %}
{% if is_component %}
  rclcpp_components
{% endif %}
{% if is_lifecycle %}
  rclcpp_lifecycle
{% endif %}
  std_msgs
{% if has_service_server %}
  std_srvs
{% endif %}
)

{% if is_component %}
install(TARGETS {{ target_name }}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)
{% else %}
install(TARGETS {{ target_name }}
  DESTINATION lib/${PROJECT_NAME}
)
{% endif %}

install(DIRECTORY config launch
  DESTINATION share/${PROJECT_NAME}
  OPTIONAL
)

ament_package()
