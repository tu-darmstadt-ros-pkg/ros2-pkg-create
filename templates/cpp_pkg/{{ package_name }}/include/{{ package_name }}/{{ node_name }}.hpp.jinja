#ifndef {{ package_name|upper }}_{{ node_name|upper }}_HPP
#define {{ package_name|upper }}_{{ node_name|upper }}_HPP

#include <memory>
#include <string>
#include <vector>

{% if has_reconfigurable_params or is_lifecycle %}
{% if is_lifecycle %}
#include <hector_ros2_utils/lifecycle_node.hpp>
{% else %}
#include <hector_ros2_utils/node.hpp>
{% endif %}
{% endif %}
{% if is_lifecycle %}
#include <lifecycle_msgs/msg/state.hpp>
#include <lifecycle_msgs/msg/transition.hpp>
{% endif %}
#include <rclcpp/rclcpp.hpp>
{% if has_action_server %}
#include <rclcpp_action/rclcpp_action.hpp>
{% endif %}
{% if is_lifecycle %}
#include <rclcpp_lifecycle/lifecycle_publisher.hpp>
{% endif %}
#include <std_msgs/msg/int32.hpp>
{% if has_service_server %}
#include <std_srvs/srv/set_bool.hpp>
{% endif %}
{% if has_action_server %}

#include <{{ package_name }}_msgs/action/fibonacci.hpp>
{% endif %}


namespace {{ package_name }}
{

{% if is_lifecycle %}
class {{ node_class_name }} : public hector::LifecycleNode
{% elif has_reconfigurable_params %}
class {{ node_class_name }} : public hector::Node
{% else %}
class {{ node_class_name }} : public rclcpp::Node
{% endif %}
{
public:

{% if is_component %}
  explicit {{ node_class_name }}(const rclcpp::NodeOptions& options);
{% else %}
  {{ node_class_name }}();
{% endif %}
{% if is_lifecycle %}

protected:
  /**
  * @brief Processes 'configuring' transitions to 'inactive' state
  *
  * @param state previous state
  * @return transition result
  */
  rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn
  on_configure( const rclcpp_lifecycle::State& state ) override;
  
  /**
  * @brief Processes 'activating' transitions to 'active' state
  *
  * @param state previous state
  * @return transition result
  */
  rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn
  on_activate( const rclcpp_lifecycle::State& state ) override;

  /**
  * @brief Processes 'deactivating' transitions to 'inactive' state
  *
  * @param state previous state
  * @return transition result
  */
  rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn
  on_deactivate( const rclcpp_lifecycle::State& state ) override;

  /**
  * @brief Processes 'cleaningup' transitions to 'unconfigured' state
  *
  * @param state previous state
  * @return transition result
  */
  rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn
  on_cleanup( const rclcpp_lifecycle::State& state ) override;

  /**
  * @brief Processes 'shuttingdown' transitions to 'finalized' state
  *
  * @param state previous state
  * @return transition result
  */
  rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn
  on_shutdown( const rclcpp_lifecycle::State& state ) override;
{% endif %}

private:
  //! @brief Sets up subscribers, publishers, etc. to configure the node
  void setup();
{% if is_lifecycle %}

  void cleanUp();
{% endif %}
{% if has_subscriber %}

  void topicCallback( const std_msgs::msg::Int32& msg );
{% endif %}
{% if has_service_server %}

  void serviceCallback( const std::shared_ptr<std_srvs::srv::SetBool::Request>request,
                        std::shared_ptr<std_srvs::srv::SetBool::Response> response );
{% endif %}
{% if has_action_server %}

  rclcpp_action::GoalResponse
  actionHandleGoal( const rclcpp_action::GoalUUID& uuid,
                    std::shared_ptr<const {{ package_name }}_msgs::action::Fibonacci::Goal> goal );

  rclcpp_action::CancelResponse actionHandleCancel(
      const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_msgs::action::Fibonacci>> goal_handle );

  void actionHandleAccepted(
    const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_msgs::action::Fibonacci>> goal_handle );

  void actionExecute(
    const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_msgs::action::Fibonacci>> goal_handle );
{% endif %}
{% if has_timer %}

  void timerCallback();
{% endif %}
{% if auto_shutdown %}

  void autoShutdownTimerCallback();
{% endif %}

private:

{% if has_subscriber %}

  rclcpp::Subscription<std_msgs::msg::Int32>::SharedPtr subscriber_;
{% endif %}
{% if has_publisher %}
{% if is_lifecycle %}
  rclcpp_lifecycle::LifecyclePublisher<std_msgs::msg::Int32>::SharedPtr publisher_;
{% else %}
  rclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr publisher_;
{% endif %}
{% endif %}
{% if has_service_server %}

  rclcpp::Service<std_srvs::srv::SetBool>::SharedPtr service_server_;
{% endif %}
{% if has_action_server %}

  rclcpp_action::Server<{{ package_name }}_msgs::action::Fibonacci>::SharedPtr action_server_;
{% endif %}
{% if has_timer %}

  rclcpp::TimerBase::SharedPtr timer_;
{% endif %}
{% if has_params %}

  double param_ = 1.0;
{% endif %}
{% if auto_shutdown %}

  rclcpp::TimerBase::SharedPtr auto_shutdown_timer_;
{% endif %}
};

}

#endif // {{ package_name|upper }}_{{ node_name|upper }}_HPP
